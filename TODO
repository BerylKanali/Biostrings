Some R problems that maybe worth reporting:

- Loading a serialized BStringViews object without prior loading the Biostrings
  package seems to have problems: the object loads, but, when I try to display
  it, then nothing is printed and the prompt doesn't come back either (unless I
  CTRL C).


In 2.[6|7]
==========

- Fix this: 
    > matchPattern("ab", "xyz", mismatch=2)
      Views on a 3-letter BString subject
    Subject: xyz
    Views:
        start end width
    [1]    -1   0     2 [  ]
    [2]     0   1     2 [ x]
    [3]     1   2     2 [xy]
    [4]     2   3     2 [yz]
    [5]     3   4     2 [z ]
  Either the (start=4,end=5) match should be included, or the (start=-1,end=0)
  match should not. An alternative is to raise an error (or a warning) when
  mismatch >= nchar(pattern).

In 2.7
======

- Fix GENETIC_CODE object (replace T by U). Add functions for translating DNA
  or RNA into AA.

- BStringList objects:
    o Pb with DNAStringList(DNAStringList(dict0), 6) being very very slow.
      I suspect there is something wrong with C routine subBStrings when
      proto is NULL.
    o Improve speed of BStringList() and family when the input is a BStringList
      or BStringViews object (i.e. XRaw input). Follow the same path as for
      character input where C routine charseqs_to_BStrings() is used.
      For XRaw input, implement C routine copy_subXRaw() and use it for
      copySubXRaw(). Add copySubBString() and copySubBStrings() and use them in
      the BString() and BStringList() constructors.
    o Add read.BStringList/write.BStringList.
    o Add methods for BStringList objects everywhere there are methods defined
      for BStringViews objects (alphabetFrequency, reverse, matchPattern,
      etc...). Make them work in a vectorized fashion for BStringList objects.
    o Replace serialized BStringViews objects (multiple sequences) by serialized
      BStringList objects in BSgenome.* packages. Modify BSgenome:::mseqnames
      man page consequently. Bump versions of BSgenome + all the BSgenome.* pkgs
      and make the updated BSgenome.* pkgs depend on the updated BSgenome pkg.

- In align_needwunsQS(): use mkXRaw() instead of making external pointers by hand.

- When algo="auto", use "naive_inexact" instead of "shift-or" when max.mismatch
  is high (e.g. >= 8, finding the exact cut-value requires some testing).
  Correct Robert's RBioinf book reporting that the performance decrease
  significantly when max.mismatch becomes to large. Should not be the case
  anymore.

- Rename 'data' slot (BString class) -> 'xdata'

- Rework findPalindromes() (and findComplementedPalindromes()) so that they
  return maximum palindromes only.

- matchPDict():

  o check that countPDict(...) is equivalent to
        countIndex(matchPDict(...), all.names=TRUE)

  o startIndex() is broken on the ViewsIndex object returned by a call to
    matchPDict() on a TPdna_PDict object.

  o Once DNAStringList() constructor is fast enough on character and
    BStringViews input, simplify "initialize" method for ULdna_PDict:
    convert character and BStringViews inputs with DNAStringList() and
    support only one type of input (DNAStringList) at the C level.

  o C code improvement: no need to use temporrary storage for 'dups_buf' and
    'match_count' in match_TPdna.c, store directly in the returned
    INTEGER vector.

  o Fix this bug:
    > pdict <- new("ULdna_PDict", c("AA", "AC"))
    > matchPDict(pdict, DNAString("TAACAC"))
    Error in .match.ULdna_PDict.exact(pdict, subject, count.only) : 
      Biostrings internal error in _init_code2offset_lkup(): invalid code

  o Make reverseComplement() work on a PDict object.

  o ViewsIndex objects: at some point the user will want to be able to combine
    "compatible" ViewsIndex objects. 2 ViewsIndex objects are "compatible" if they
    are describing 2 set of matches coming from the same input dict and on
    the same target (subject). In practice, it will be enough that they have
    the same index i.e. they have the same pids() or, if the pids() is NULL,
    they have the same length.
    Then methods like "union", "intersect", "setdiff", "setequal", etc...
    could be defined. The set operation would be performed between the 2
    subsets of matches of each input pattern. Of course, 2 matches are
    considered equal if their start/end are the same.

  o GenomeSearching.Rnw vignette: add section about inexact matching with matchPDict

- Finish C implemntation of read.BStringViews()

- Add some convenience function (e.g. a wrapper to .valid.algos()) to let the
  curious user know which algos are available/used for a given search problem.

- Define a DNAorRNA class (or NucleotideString) that is the union of the
  DNAString and RNAString classes (use a union class for this or "do it by
  hand" by defining this as a virtual class and by having the DNAString
  and RNAString classes derived from it). Then use it to simplify code like:
    setMethod("alphabetFrequency", "DNAString", ...)
    setMethod("alphabetFrequency", "RNAString", ...)
  These 2 methods can be replaced by a single method:
    setMethod("alphabetFrequency", "NucleotideString", ...)
  Also this:
    if (is(x@subject, "DNAString") || is(x@subject, "RNAString")) ...
  can be replaced by:
    if (is(x@subject, "NucleotideString")) ...
  Etc...

- Add a new generic that combines a subject and a Views (or Views-like)
  object to return a BStringViews object. The Views-like object could be
  ViewsIndex object and the method for it would do as if it had received
  unlist(ViewsIndex). Currently my problem is that I can't come up with a good
  name for such generic :-/ Maybe I could just use views(subject, x) for
  this (dispatch would be on x, not subject). And the current views function
  could be renamed (or maybe it's not needed at all, maybe a fancy
  new("Views", ...) could replace it).

- Add a MaskedBString class. 2 ways to do this:
    1. Extend the BStringViews class
    2. I think I prefer this: add a Mask class (a direct extension of the
       Views class where the views are guaranted to be normalized) and define
       the MaskedBString class on top of that (in the same way that the
       BStringViews class is defined on top of the Views class).
  For example alphabetFrequency would work by default in a vectorized fashion
  on a BStringViews object (Robert suggests to control this via a collapse arg),
  but in a cumulative fashion on a MaskedBString object.
  Working on the MaskedBString class will require some reworking of the mask()
  feature and the addition of some utility functions like is.normalized (define
  a method for Views objects, can then be used to check that a Mask or a
  MaskedBString object is valid or that a BStringViews object is normalized
  and can then be turned into a MaskedBString object), etc...

- readFASTA(): set the default for strip.desc to TRUE (with a warning when
  strip.desc is missing). This was already done in svn trunk/release a few
  weeks ago (October 2007) and rolled back on Robert's request. Now Robert
  seems to be ready for this change but wants Nolwenn to be personally notified
  about it (so she can fix her code using readFASTA()). Make this change in
  trunk only (too late for release). Remove the warning after the BioC 2.2
  release.

- Remove the Biostrings 1 subdir.

- Change signature of matchPattern() (and of friends too, maybe): add a
  'min.mismatch' arg.

- Maybe: add a specific containers for results returned by matchPattern
  (and family). Would derive from the BStringViews class with at least one
  additional slot, the @call slot (of type "language"), that would contain
  the value of match.call(), so that one knows what parameters were supplied
  for a given matching task.

- Code cleaning: use getBString_charseq() in every C routine that receives a
  BString argument. This reduces the number of args that need to be passed
  and makes the code much cleaner. See match_naive_exact() and
  match_naive_inexact() for an example.

- Make alphabetFrequency works with BStringViews objects with
  "out of limits" views.

- Merge ~rgentlem/tmp/EMBOSS-3.0.0/emboss/matcher.c (Huang & Miller
  alignment algo) into Biostrings.

- An old Robert request: "have a look at GeneR, and see if there are
  any other packages that do sequence matching, and describe, in one page or
  so, what the differences are between the packages (also some notion of speed
  and size, how well do they work on different inputs)".

- Have the BStringViews() method for BString objects support the 'sep' arg.

- Test Raphael use case with built-in string functions and compare speed
  with Biostrings solution. Add the conclusions to the matchPattern.Rnw
  vignette.

- Why doesn't sapply or lapply work for a BStringViews object (it didn't
  work either for BioString objects). Isn't it enough that these objects
  are subsettable?

- Compare NAMESPACE + list of aliases in Rd files from Biostrings 1 and 2
  make sure no important feature has been lost.

- Update the CHANGES file.


In 2.9
======

- readFASTA(): remove warning when strip.desc is missing.


Later
=====

- Restore the test units.

- Fix pb with length(x) <- 2 screwing up x if it's a BString or BStringViews
  object (prevent people of doing this by defining the replacement version
  of the length method and issuing an error).

- Still have to think about it (Robert suggestion): make [[ work on "out
  of limits" views with a warning (we keep issuing an error only when the
  view is all blank).

- Merge SuffixTree package from Robert.

